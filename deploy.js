const ethers = require("ethers");
const { getContractAddress } = require("ethers/lib/utils");
const fs = require("fs-extra");
require("dotenv").config();

async function main(){
//    http://127.0.0.1:7545 
// console.log(process.env.PRIVATE_KEY);
const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY,provider);
const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi","utf8");
const binary = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin","utf8");
const contractfactory = new ethers.ContractFactory(abi,binary,wallet);
console.log("Deploying, please wait....");
const contract = await contractfactory.deploy();
await contract.deployTransaction.wait(1);
console.log(`Contract address: ${contract.address}`)
// console.log("Let's deploy with only transaction data!");
// const nonce = await wallet.getTransactionCount();

// const tx ={
//     nonce:nonce,
//     gasPrice:20000000000,
//     gasLimit:1000000,
//     to:null,
//     value:0,
//     data:"0x608060405234801561001057600080fd5b5061080b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d1461007a578063795fff1d146100965780638bab8dd5146100b25780639e7a13ad146100e2575b600080fd5b610064610113565b604051610071919061053f565b60405180910390f35b610094600480360381019061008f9190610482565b61011c565b005b6100b060048036038101906100ab9190610426565b61013b565b005b6100cc60048036038101906100c791906103dd565b6101cb565b6040516100d9919061053f565b60405180910390f35b6100fc60048036038101906100f79190610482565b6101f9565b60405161010a92919061055a565b60405180910390f35b60008054905090565b8060008190555060016000546101329190610607565b60008190555050565b600160405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101a19291906102b5565b505050806002836040516101b59190610528565b9081526020016040518091039020819055505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6001818154811061020957600080fd5b9060005260206000209060020201600091509050806000015490806001018054610232906106a9565b80601f016020809104026020016040519081016040528092919081815260200182805461025e906106a9565b80156102ab5780601f10610280576101008083540402835291602001916102ab565b820191906000526020600020905b81548152906001019060200180831161028e57829003601f168201915b5050505050905082565b8280546102c1906106a9565b90600052602060002090601f0160209004810192826102e3576000855561032a565b82601f106102fc57805160ff191683800117855561032a565b8280016001018555821561032a579182015b8281111561032957825182559160200191906001019061030e565b5b509050610337919061033b565b5090565b5b8082111561035457600081600090555060010161033c565b5090565b600061036b610366846105af565b61058a565b9050828152602081018484840111156103875761038661079e565b5b610392848285610667565b509392505050565b600082601f8301126103af576103ae610799565b5b81356103bf848260208601610358565b91505092915050565b6000813590506103d7816107be565b92915050565b6000602082840312156103f3576103f26107a8565b5b600082013567ffffffffffffffff811115610411576104106107a3565b5b61041d8482850161039a565b91505092915050565b6000806040838503121561043d5761043c6107a8565b5b600083013567ffffffffffffffff81111561045b5761045a6107a3565b5b6104678582860161039a565b9250506020610478858286016103c8565b9150509250929050565b600060208284031215610498576104976107a8565b5b60006104a6848285016103c8565b91505092915050565b60006104ba826105e0565b6104c481856105eb565b93506104d4818560208601610676565b6104dd816107ad565b840191505092915050565b60006104f3826105e0565b6104fd81856105fc565b935061050d818560208601610676565b80840191505092915050565b6105228161065d565b82525050565b600061053482846104e8565b915081905092915050565b60006020820190506105546000830184610519565b92915050565b600060408201905061056f6000830185610519565b818103602083015261058181846104af565b90509392505050565b60006105946105a5565b90506105a082826106db565b919050565b6000604051905090565b600067ffffffffffffffff8211156105ca576105c961076a565b5b6105d3826107ad565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006106128261065d565b915061061d8361065d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156106525761065161070c565b5b828201905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610694578082015181840152602081019050610679565b838111156106a3576000848401525b50505050565b600060028204905060018216806106c157607f821691505b602082108114156106d5576106d461073b565b5b50919050565b6106e4826107ad565b810181811067ffffffffffffffff821117156107035761070261076a565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107c78161065d565b81146107d257600080fd5b5056fea26469706673582212205e1040a0e09278353d19adc58cb815956631a712058411a0a318eac8d1c636f364736f6c63430008070033",
//     chainId:5777,

// };

// const sentTxResponse = await wallet.sendTransaction(tx);
// await sentTxResponse(1);
// console.log(sentTxResponse);


// get number:
const currentFavoriteNumber = await contract.retrieve();
console.log(`Current Favorite Number is: ${currentFavoriteNumber.toString()}`);
const transactionResponse = await contract.store("7");
const transactionReciept = await transactionResponse.wait(1);
const updatedFavoriteNumber = await contract.retrieve();
console.log(`Updated Favorite Number is: ${updatedFavoriteNumber}`);

}

main() 
.then(()=>process.exit(0))
.catch((error) => {
    console.error(error);
    process.exit(1);

});